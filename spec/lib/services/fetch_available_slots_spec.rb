# frozen_string_literal: true

require 'rails_helper'
require_relative '../../../lib/services/fetch_available_slots'

RSpec.describe Services::FetchAvailableSlots do
  describe '#call' do
    context 'When date is not parsable' do
      it 'throws an error' do
        service = described_class.new('invalid_date', 60)

        expect(service.call).to be_nil
        expect(service.errors).to include('Invalid date provided!')
      end
    end

    context 'When date is in past' do
      it 'throws an error' do
        service = described_class.new('01/01/2000', 60)

        expect(service.call).to be_nil
        expect(service.errors).to include('Date cannot be in the past!')
      end
    end

    context 'When duration is less than 30' do
      it 'throws an error' do
        service = described_class.new('01/01/2030', 20)

        expect(service.call).to be_nil
        expect(service.errors).to include('Minimum duration is 30 minutes!')
      end
    end

    context 'When there is no other booking during the day' do
      let(:expected_slots) do
        ['00:00', '00:15', '00:30', '00:45', '01:00', '01:15', '01:30', '01:45', '02:00', '02:15', '02:30', '02:45',
         '03:00', '03:15', '03:30', '03:45', '04:00', '04:15', '04:30', '04:45', '05:00', '05:15', '05:30', '05:45',
         '06:00', '06:15', '06:30', '06:45', '07:00', '07:15', '07:30', '07:45', '08:00', '08:15', '08:30', '08:45',
         '09:00', '09:15', '09:30', '09:45', '10:00', '10:15', '10:30', '10:45', '11:00', '11:15', '11:30', '11:45',
         '12:00', '12:15', '12:30', '12:45', '13:00', '13:15', '13:30', '13:45', '14:00', '14:15', '14:30', '14:45',
         '15:00', '15:15', '15:30', '15:45', '16:00', '16:15', '16:30', '16:45', '17:00', '17:15', '17:30', '17:45',
         '18:00', '18:15', '18:30', '18:45', '19:00', '19:15', '19:30', '19:45', '20:00', '20:15', '20:30', '20:45',
         '21:00', '21:15', '21:30', '21:45', '22:00', '22:15', '22:30', '22:45', '23:00', '23:15', '23:30', '23:45']
      end

      it 'returns all 15 minute slots' do
        expect(described_class.new('01/01/2030', 60).call).to eq(expected_slots)
      end
    end

    context 'When there is a booking during the day time' do
      let!(:booking) do
        create(:booking, starts: Time.zone.parse('01/01/2030 15:00'), ends: Time.zone.parse('01/01/2030 16:00'))
      end
      let(:expected_slots) do
        ['00:00', '00:15', '00:30', '00:45', '01:00', '01:15', '01:30', '01:45', '02:00', '02:15', '02:30', '02:45',
         '03:00', '03:15', '03:30', '03:45', '04:00', '04:15', '04:30', '04:45', '05:00', '05:15', '05:30', '05:45',
         '06:00', '06:15', '06:30', '06:45', '07:00', '07:15', '07:30', '07:45', '08:00', '08:15', '08:30', '08:45',
         '09:00', '09:15', '09:30', '09:45', '10:00', '10:15', '10:30', '10:45', '11:00', '11:15', '11:30', '11:45',
         '12:00', '12:15', '12:30', '12:45', '13:00', '13:15', '13:30', '13:45', '16:15', '16:30', '16:45', '17:00',
         '17:15', '17:30', '17:45', '18:00', '18:15', '18:30', '18:45', '19:00', '19:15', '19:30', '19:45', '20:00',
         '20:15', '20:30', '20:45', '21:00', '21:15', '21:30', '21:45', '22:00', '22:15', '22:30', '22:45', '23:00',
         '23:15', '23:30', '23:45']
      end

      it 'removes the slots during the booking time' do
        expect(described_class.new('01/01/2030', 60).call).to eq(expected_slots)
      end
    end

    context 'When there is a booking that goes through mid-night' do
      let!(:booking) do
        create(:booking, starts: Time.zone.parse('01/01/2030 21:00'), ends: Time.zone.parse('02/01/2030 01:00'))
      end

      context 'When the given date is on the first day' do
        let(:expected_slots) do
          ['00:00', '00:15', '00:30', '00:45', '01:00', '01:15', '01:30', '01:45', '02:00', '02:15', '02:30', '02:45',
           '03:00', '03:15', '03:30', '03:45', '04:00', '04:15', '04:30', '04:45', '05:00', '05:15', '05:30', '05:45',
           '06:00', '06:15', '06:30', '06:45', '07:00', '07:15', '07:30', '07:45', '08:00', '08:15', '08:30', '08:45',
           '09:00', '09:15', '09:30', '09:45', '10:00', '10:15', '10:30', '10:45', '11:00', '11:15', '11:30', '11:45',
           '12:00', '12:15', '12:30', '12:45', '13:00', '13:15', '13:30', '13:45', '14:00', '14:15', '14:30', '14:45',
           '15:00', '15:15', '15:30', '15:45', '16:00', '16:15', '16:30', '16:45', '17:00', '17:15', '17:30', '17:45',
           '18:00', '18:15', '18:30', '18:45', '19:00', '19:15', '19:30', '19:45']
        end

        it 'returns available slots' do
          expect(described_class.new('01/01/2030', 60).call).to eq(expected_slots)
        end
      end

      context 'When the given date is on the second day' do
        let(:expected_slots) do
          ['01:15', '01:30', '01:45', '02:00', '02:15', '02:30', '02:45', '03:00', '03:15', '03:30', '03:45', '04:00',
           '04:15', '04:30', '04:45', '05:00', '05:15', '05:30', '05:45', '06:00', '06:15', '06:30', '06:45', '07:00',
           '07:15', '07:30', '07:45', '08:00', '08:15', '08:30', '08:45', '09:00', '09:15', '09:30', '09:45', '10:00',
           '10:15', '10:30', '10:45', '11:00', '11:15', '11:30', '11:45', '12:00', '12:15', '12:30', '12:45', '13:00',
           '13:15', '13:30', '13:45', '14:00', '14:15', '14:30', '14:45', '15:00', '15:15', '15:30', '15:45', '16:00',
           '16:15', '16:30', '16:45', '17:00', '17:15', '17:30', '17:45', '18:00', '18:15', '18:30', '18:45', '19:00',
           '19:15', '19:30', '19:45', '20:00', '20:15', '20:30', '20:45', '21:00', '21:15', '21:30', '21:45', '22:00',
           '22:15', '22:30', '22:45', '23:00', '23:15', '23:30', '23:45']
        end

        it 'returns available slots' do
          expect(described_class.new('02/01/2030', 60).call).to eq(expected_slots)
        end
      end
    end
  end
end
